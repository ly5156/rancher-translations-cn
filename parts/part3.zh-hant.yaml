action:
  activate: 激活
  addContainer: 部署 Pod
  addHost: 添加主機
  addSidekick: 添加 Sidecar
  auditlog: 審計日誌
  backupEtcd: 備份
  backupEtcdMessage:
    fail:
      message: 備份{ clusterId }到{ backupType }存儲
      title: 備份失敗
    success:
      message: 已備份 { clusterId } 到 { backupType } 存儲。
      start: 開始備份
      title: 備份成功
  clone: 克隆
  cloneCrossCluster: 跨集群克隆
  cloneRevision: 克隆修訂
  console: 打開控制台
  convertToService: 轉換為服務
  cordon: 暫停
  deactivate: 停用
  disableAutoInject: 禁用 Istio 自動注入
  download: 下載
  downloadFile: 下載文件
  downloadYaml: 下載 YAML
  drain: 驅散
  edit: 編輯
  editConfig: 編輯配置
  editService: 編輯服務
  editVsAnnotaionForGlobalDns: 添加/刪除 Global DNS Record
  editYaml: 查看/編輯 YAML
  enableAutoInject: 啟用 Istio 自動注入
  evacuate: 疏散
  execute: 執行命令行
  exportConfig: 導出配置
  garbageCollect: 清理
  importHost: 導入主機
  logs: 查看日誌
  makeDefault: 設置為缺省
  move: 移動
  mute: 靜默
  nodeConfig: 下載密鑰
  pause: 暫停編排
  pauseAll: 全部暫停
  redeploy: 重新部署
  refreshAuthProviderAccess:
    allSuccess:
      message: 已為所有用戶觸發組成員更新。
      title: 更新成功
    label: 刷新組成員
    success:
      message: 已觸發組成員刷新
      title: 刷新成功
  registration: Registration Cmd
  remove: 刪除
  replay: 重播
  rerun: 重新運行
  resetDefault: 重置默認設置
  resize: 擴容
  restart: 重啟
  restoreFromEtcdBackup: 恢復
  resume: 恢復編排
  resumeCronjob: 重新開始
  retry: 重試
  revert: 恢復默認值
  revision: 新修訂的默認值
  rollback: 回滾
  rotate: 更新證書
  rotateEncryption: 輪換加密密鑰
  run: 運行
  runCISScan: 運行 CIS 掃描
  saveAsTemplate: 另存為 RKE 模板
  scaledown: Scale Down
  setDefault: 設置為缺省
  setDefaultRevision:
    success:
      message: 已在 {ctName} 的默認修訂中設置了 {name}。
      title: 成功
  setting: 設置
  start: 啟動
  startAll: 全部開始
  stop: 停止
  stopAll: 全部停止
  stopDrain: 停止驅散
  suspend: 暫停
  test: 測試
  uncordon: 激活
  unmute: 取消靜默
  upgrade: 升級
  upgradeOrEdit: 升級/編輯
  viewConfig: 查看配置
  viewGraph: 查看圖形
  viewInApi: API查看
  viewInGrafana: 查看 Grafana
  viewInstance: 查看實例
  viewYaml: 查看YAML
clusterDrivers:
  add: 添加集群驅動
  builtIn: 內置
  refresh: 刷新 Kubernetes 元數據
  table:
    noData: 當前集群沒有配置任何節點
    noMatch: 沒有節點匹配當前搜索
clusterTemplateRevisionUpgradeNotification:
  tooltip: 修訂 {revision} 可用於升級。
clusterTemplatesPage:
  headers:
    created: 創建時間
    defaultRevisionId: 默認修訂
    revisionsCount: 修訂版本
  index:
    header: RKE 集群模板列表
    newTemplate: 添加模板
  new:
    header: 添加模板
  newRevision:
    header: 新集群模板修訂
  select:
    label: 從模板修訂克隆
  table:
    name: 修訂版本名稱
containersSection:
  detail: Pod 中的容器
  initContainer: Init 容器
  noData: 沒有容器
  noMatch: 沒有容器與當前搜索匹配
  title: 容器
copyToClipboard:
  copied: 已複製
  tooltip: 複製到剪貼板
cruPersistentVolumeClaim:
  capacity:
    help: 幫助
    label: 容量
    unit: GiB
  define:
    addActionLabel: 確定
  name:
    placeholder: "例如: Myvol"
  pv:
    label: 持久卷
    prompt: 選擇一個持久卷...
  secretRequired:
    name: 密文名稱
    namespace: 密文命名空間
  source:
    label: 源
    pv: 使用已有的持久卷
    storageClass: 使用存儲類來配置新的持久卷
  storageClass:
    label: 存儲類
    prompt: 使用默認類
  title:
    define: 定義卷聲明
    edit: "編輯卷聲明: {name}"
    new: 添加卷聲明
    view: "持久卷: {name}"
  volumeHandleRequired:
    label: Volume Handle
editCertificate:
  description:
    placeholder: "例如: Mydomain.com的EV證書"
  name:
    placeholder: "例如: Mydomain.com"
  noteKeyWriteOnly: 注意:Private Key部分為只寫(write only)因而顯示為空白。更新證書時您需要重新上傳Private Key，即便Private Key未發生變化
  title: 編輯證書
editCluster:
  description:
    label: 描述
    placeholder: "例如: 開發人員所共享的集群"
  modal:
    onCluster: "注意: 您正在嘗試刪除您當前環境所在的集群。請在刪除該集群之前，先選擇一個其他集群的環境"
  name:
    label: 名稱
    placeholder: "例如: Sandbox"
  systemStacks:
    add: 添加應用
    cancel: 取消添加系統應用
    detail: 這些應用將會被自動部署到該集群的System環境中。
    hr: 集群選項
    noData: 沒有應用將會被部署到系統環境中。
    title: 系統應用
  title:
    edit: 編輯集群
    new: 添加集群
editPipelineConfig:
  download: 僅下載流水線配置。
  header: 修改流水線配置
  pushToReop: 將如下的流水線配置自動推送到遠端代碼庫。
  timeout:
    helpText: 如果構建在該時間內沒有執行完成，則終止本次構建。
    label: 超時時間
enablePipeline:
  configNow: 立即設置
  header: 啟用代碼庫認證
  helpText: 代碼庫認證尚未開啟,需要先開啟代碼庫認證。
  noPermission: 代碼庫認證尚未開啟,需要聯繫項目管理員設置認證。
formBalancerListeners:
  access:
    internal: 內部
    label: 訪問
    public: 公開
  addPortLabel: 添加一個監聽端口
  detail: 配置負載均衡，使其將請求轉發到目標地址。
  help: 主機及路徑規則將根據顯示的順序自上而下進行匹配，後端默認將隨機命名。要自定義生成的後端，提供一個名稱並在您自定義的haproxy.cfg文件中引用該名稱
  label: 監聽器與目標規則
  noRules: 沒有端口
  protocol:
    label: 協議
  removePortLabel: 刪除這個監聽端口
  showBackendLabel: 自定義backend名稱
  sourceIp:
    label: 主機IP
    placeholder: "例如: 1.2.3.4; Default: All"
  sourcePort:
    label: 監聽端口
    placeholder: "例如: 80"
  status: "{count, plural,\n=0{無規則}\n=1{#條規則}\nother{#條規則}\n}\n"
formHealthCheck:
  checkType:
    command: 容器中進程退出狀態碼檢查(0)
    http: HTTP請求狀態檢查(2xx或3xx)
    https: HTTPS請求狀態檢查(2xx或3xx)
    none: 無
    tcp: TCP端口檢查
  combinedLivenessCheck: 使用相同的就緒狀態(readiness)與存活狀態(liveness)配置
  command:
    label: 命令
    placeholder: "例如: cat /tmp/health"
  detail: 周期性向容器發出請求，以檢測其健康狀態。默認設置下，readiness和liveness使用相同的配置參數。對於應用初始化較長的容器，需要增加就緒檢測時間。
  failureThreshold:
    label: 不健康閾值
    unit: 失敗
  host:
    label: 主機 Headers
    placeholder: "例如: example.com"
  httpHeaders:
    addActionLabel: 添加Headers
    keyLabel: Http頭字段
    keyPlaceholder: "例如: 用戶代理"
    label: 其他的HTTP Headers
    valuePlaceholder: "例如: 健康檢查"
  initialDelaySeconds:
    label: 運行多少時間後開始檢測
  liveness: 存活狀態檢查(liveness)
  path:
    label: 請求路徑
    placeholder: "例如: /health"
  periodSeconds:
    label: 檢查間隔
  port:
    label: 容器端口
    placeholder: "例如: 80"
  readiness: 就緒狀態檢查(readiness)
  reinitializingTimeout:
    label: 重新檢查時間
  separateLivenessCheck: 單獨配置存活狀態(liveness)檢查
  successThreshold:
    label: 健康閾值
    unit: 成功
  timeoutSeconds:
    label: 檢查超時
  title: 健康檢查
formNodeTaints:
  addAction: 添加污點（Taint）
  detail: 污點標記的節點不接受未配置容忍（tolerate）的 Pods 調度。
  effect:
    label: 影響
  key:
    label: 鍵
    placeholder: "例如: foo"
  protip: 必須是唯一的鍵值對
  title: 污點（Taints）
  value:
    label: 值
    placeholder: "例如: bar"
formPorts:
  addAction: 添加規則
  containerPort:
    label: 容器端口
    placeholder: "例如: 8080"
  dnsName:
    label: DNS名稱
    placeholder: "例如: example"
  error:
    hostPort:
      sourcePortRequired: 對於運行Pod的主機，必須始終源端口。
    loadBalancer:
      sourcePortRequired: 每條規則必須設置源端口。
    mixedIpPort: Port{ip}:{port}/{proto}有超過一條映射規則。
    mixedPort: Port{port}/{proto}有超過一條映射規則。
    privateRequired: 每條映射規則必須設置容器端口。
    publicRequired: 如果指定了主機IP，則需要源端口。
  header: 端口映射
  hostPortWarning: "Host Port 模式不支持 Windows 節點。了解更多關於 Windows 在 Kubernetes 中的<a href=\"https://kubernetes.io/docs/setup/production-environment/windows/intro-windows-in-kubernetes/#limitations\" target=\"_blank\">支持限制</a>。"
  kind:
    ClusterIP: 集群IP(集群內部訪問)
    HostPort: HostPort(僅Pod所在主機端口可訪問)
    HostPortDisbaled: HostPort
    LoadBalancer: L4層負載均衡器(對接公有雲負載均衡服務)
    LoadBalancerDisbaled: 'L4 層負載均衡器 (禁用)'
    NodePort: NodePort(所有主機端口均可訪問)
    label: 網絡模式
  name:
    label: 名稱
    placeholder: "例如: backend"
  noPorts: 當前Pod沒有映射端口
  nodePort:
    customPortRangePlaceholder: "端口範圍{range}，例如: {port}"
    placeholder: "默認端口範圍 30000-32767，例如: 30000"
  protocol:
    label: 協議
  showAdvanced: 顯示端口命名選項
  sourcePort:
    clusterIpDefault: 與容器端口相同
    ipPlaceholder: "例如: 80或19.82.2.24:80"
    label: 主機監聽端口
    placeholder: "例如: 80"
  warning: 這個工作負載不是由{appName}或{appName} API創建的,{appName}不會自動為端口映射創建相關服務。
formReservation:
  limitCpu:
    label: "{component} CPU 限制"
    placeholder: "例如: 1000"
  limitMemory:
    label: "{component} Memory 限制"
    placeholder: "例如: 1000"
  requestCpu:
    label: "{component} CPU 預留"
    placeholder: "例如: 1000"
  requestMemory:
    label: "{component} Memory 預留"
    placeholder: "例如: 1000"
formScheduling:
  addCustom: 添加自定義規則
  addRule: 添加規則
  autoPick:
    container: 為每一個Pod自動選擇符合調度規則的主機
    host: 自動選擇符合調度規則的主機
    vm: 為每一個虛擬機自動選擇符合調度規則的主機
  autoRun: 在匹配調度規則的每個主機上自動運行
  canRequestHost:
    containers: 指定主機運行<b>所有Pods</b>
    vm: 在指定主機上運行<b>所有</b>虛擬機
  condition: 條件
  detail: 配置Pod對應的主機調度規則。
  effect: 效果
  field: 字段
  hostMax: 最大主機數
  key: 標籤鍵
  noRules: 沒有配置規則
  noToleration: 未配置節點污點
  nodeSelector:
    custom:
      placeholder: "例如: foo>42 && bar != baz"
    multiple:
      placeholder: "例如: foo，bar，baz"
    operator:
      eq: =
      exists: 已設置
      ge: "&ge;\n"
      gt: ">"
      in: 在列表中
      le: "&le;\n"
      lt: <
      ne: "&ne;\n"
      notExists: 未設置
      notIn: 不在列表中
    preferred: 首選
    requireAll: 必須
    requireAny: 最好
  operator: 操作符
  perHost: 每個主機
  priority:
    label: 優先級等級
    placeholder: "例如: 3"
  priorityClassName:
    label: 優先級顯示名稱
    placeholder: "例如: 高"
  runSpecific: 在指定主機上運行此Pod
  scaleIncrement: 伸縮增量
  scaleMax: 最大數量
  scaleMin: 最小數量
  scaling:
    hostMaxDetail: 如果設置，容器將最多被運行在這個數量的主機上。
    incrementDetail: 如果設置，容器數量必須是它的倍數。
    minMaxDetail: 如果設置，用戶將無法通過界面或API請求使容器數量低於最小數量或超過最大數量。
  scheduler:
    label: 調度
    placeholder: "例如: MyScheduler"
  status: "{count, plural,\n=0{無規則}\n=1{#條規則}\nother{#條規則}\n}\n"
  time: 時間
  title: 主機調度
  toleration:
    add: 增加調度容忍
    title: 調度容忍
    workloadTitle: "{workload} Pod 的容忍"
  value: 標籤值
formScopedRoles:
  description: 控制用戶對{type}的訪問權限
  mode:
    admin:
      detail: 所有者可以完全控制{type}及內部的所有資源。
      label: 所有者
    custom:
      detail: 為用戶選擇單個角色
      label: 自定義
    readOnly:
      detail: 成員僅可以查看{type}中的資源，但不能更改資源和{type}本身。
      label: 只讀
    role:
      read-only:
        detail: 允許看到一切，但不會改變任何東西。
        label: 只讀
    user:
      detail: 成員可以管理{type}內部的資源，但不能更改{type}本身。
      label: 成員
    userDef:
      detail: 用戶定義的角色
  title: "{type}權限"
formServicePorts:
  addAction: 添加
  header: 端口映射
  name:
    label: 端口名称
    placeholder: "例如: myport"
  noPorts: 此服務沒有端口映射。
  nodePort:
    label: 主機端口
    placeholder: "例如: 30000"
  port:
    label: 服務端口
    placeholder: "例如: 8088"
  protocol:
    label: 協議
  targetPort:
    default: 默認與服務端口相同
    label: 目標端口（容器端口）
    placeholder: "例如: 80"
formShareMember:
  add: 添加成員
  helpText: 在分配所有者時，用戶必須具有<a href="/g/security/roles">Create Cluster Template</a>全局角色，以便創建新的修訂。這些權限可以由管理員授予。
  public: 轉換為公有 (只讀)
  table:
    headers:
      accessType: 訪問類型
      name: 名稱
    noData: 您沒有與任何人共享此集群模板。
    noMatch: 沒有成員匹配您的搜索
formValueArray:
  addActionLabel: 添加值
  noData: 沒有數據
  protip: "高級技巧: 在任意輸入欄中粘貼一行或多行的value能夠批量輸入。"
  valueLabel: 值
  valuePlaceholder: 值
formVolumePodSecurityPolicy:
  detail: 控制卷類型的使用
  title: 卷策略
  volumes: 數據卷
hostSettings:
  badTld:
    alert: "'<code>.local</code>頂級域名根據RFC6762被保留為用於多播DNS。不推薦使用.local域名作為註冊URL，該設置可能導致DNS解析問題。請選擇其他的主機名或者IP地址'\n\n"
  header: 主機註冊URL
  helpText:
    isRancher: <a href="{docsBase}/installing-rancher/installing-server/basic-ssl-config/" target="_blank">SSL Termination</a>
    sslTerm: SSL終止
    static1: 不要包含<code>/v1</code>或任何其他路徑，但如果您設置了
    static2: 在{appName}前面，請確保使用<code>https://</code>.
  hostUrl:
    local: "當前站點地址:"
    new:
      labelText: "其他地址:"
      placeholder: "例如: http://example.com:8080"
  notPublic:
    alert: |
      確定要創建的所有主機都能夠連接<code>{activeValue}</code>？<br/>當前地址似乎是私有IP或內部網絡。
  subtext: 主機連接{appName}API的Base URL是？
ingressPage:
  gkeIngressWarning: Kubernetes Engine可能需要幾分鐘才能分配外部IP地址並準備負載均衡器。與此同時，您可能會收到HTTP 404和HTTP 500等錯誤，直到負載平衡器準備好為流量提供服務。
  header: "Ingress: {name}"
  table:
    noData: 沒有定義ingress規則
    noMatch: 沒有ingresses匹配當前搜索。
    targets:
      label: 目標
inputAnswers:
  config: 配置選項
  editAsForm: 編輯表單
  noConfig: 該模板沒有配置選項
  protip: 粘貼和讀取操作要求應答為yml/yaml格式
  unknownType: "未識別問題類型:"
  yaml: 編輯YAML
  yamlConfig: 粘貼或者上傳yml/yaml格式的應答參數
  yamlProtip: 您可以在下面的預覽部分，找到該應用的默認應答值
inputIdentity:
  dropdownLabel:
    groups: 組
    teams: 團隊和組織
  placeholder:
    generic: 添加用戶名或組名
    github: 添加GitHub用戶或組織名稱
k8sImport:
  actionLabel: 導入
  header: 導入現有的Kubernetes
  kubeConfig:
    label: 要導入的Kubeconfig 文件
    placeholder: 導入或粘貼集群的Kubeconfig文件以供使用。
  name:
    label: 集群名稱
    placeholder: "例如: My-imported-cluster"
loginShibboleth:
  buttonText: 用Shibboleth登錄
managedImportClusterInfo:
  detail: 自定義 {provider} 集群選項
  drainServerNodes: 驅散 Control Plane 節點
  drainWorkerNodes: 驅散 Worker 節點
  error:
    int: 並發數必須是整數值
  kubernetesVersion: Kubernetes 版本
  serverConcurrency: Control Plane 並發數
  title: "{provider} 選項"
  workerConcurrency: Worker 並發數
metrics:
  apiserver-request-count: API Server 請求速率
  apiserver-request-latency: API Server 請求延遲
  cluster-cpu-load: 集群負載
  cluster-cpu-usage: CPU 使用率
  cluster-disk-io: 磁盤 I/O
  cluster-fs-usage-percent: 磁盤使用率
  cluster-gpu-memory-usage: GPU 內存使用率
  cluster-memory-usage: 內存使用率
  cluster-network-io: 網絡 I/O
  cluster-network-packet: 網絡數據包
  container-cpu-usage: CPU
  container-disk-io: 磁盤 I/O
  container-memory-usage-bytes-sum: 內存
  controllermanager-queue-depth: 控制器隊列深度
  etcd-db-bytes-sum: 數據庫大小
  etcd-disk-operate: 磁盤操作
  etcd-grpc-client: GRPC 客戶端流量
  etcd-leader-change: Leader 變更
  etcd-peer-traffic: 傳輸流量
  etcd-raft-proposals: Raft 提議
  etcd-rpc-rate: RPC 速率
  etcd-stream: 活動流
  etcd-sync-duration: 磁盤同步周期
  fluentd-buffer-queue-length: Fluentd 緩存區隊列長度
  fluentd-input-record-number: Fluentd 輸入速率
  fluentd-output-errors: Fluentd 輸出錯誤速率
  fluentd-output-record-number: Fluentd 輸出速率
  global-cluster-cpu-usage: 集群 CPU 使用量 Top 5
  global-cluster-disk-usage: 集群磁盤使用量 Top 5
  global-cluster-memory-usage: 集群內存使用量 Top 5
  global-node-cpu-usage: 節點 CPU 使用量 Top 5
  global-node-disk-usage: 節點磁盤使用量 Top 5
  global-node-memory-usage: 節點內存使用量 Top 5
  global-pod-cpu-usage: Pod CPU 使用量 Top 5
  global-pod-memory-usage: Pod 內存使用量 Top 5
  global-pod-restart: 集群 Pod 重啟次數 Top 5
  global-pod-unhealthy: 集群異常 Pod 數量 Top 5
  global-pod-unschedulable: 集群不可調度 Pod 數量 Top 5
  ingresscontroller-nginx-connection: Ingress 控制器連接數
  ingresscontroller-request-process-time: Ingress 控制器請求處理時長
  istio-4xxs: 項目 4xx 錯誤代碼計數
  istio-4xxs-top10: 服務 4xx 錯誤代碼計數
  istio-5xxs: 項目 5xx 錯誤代碼計數
  istio-5xxs-top10: 服務 5xx 錯誤代碼計數
  istio-global-request-volume: Project Request Volume
  istio-global-request-volume-top10: Request Volume by Service
  istio-global-success-rate: Project Success Rate
  istio-request-duration-p50-top10: P50 Request Latency by Service
  istio-request-duration-p90-top10: P90 Request Latency by Service
  istio-request-duration-p99-top10: P99 Request Latency by Service
  node-cpu-load: 節點負載
  node-cpu-usage: CPU 使用率
  node-disk-io: 磁盤 I/O
  node-fs-usage-percent: 磁盤使用率
  node-gpu-memory-total: GPU 內存總量
  node-gpu-memory-usage: GPU 內存使用率
  node-memory-usage: 內存使用率
  node-network-io: 網絡 I/O
  node-network-packet: 網絡數據包
  pod-cpu-usage: CPU
  pod-disk-io: 磁盤 I/O
  pod-memory-usage-bytes-sum: 內存
  pod-network-io: 網絡 I/O
  pod-network-packet: 網絡數據包
  scheduler-e-2-e-scheduling-latency-seconds-quantile: 調度器 e2e 調度延遲
  scheduler-pod-unscheduler: 調度失敗的 Pod
  scheduler-total-preemption-attempts: 調度器嘗試調度次數
  workload-cpu-usage: CPU
  workload-disk-io: 磁盤 I/O
  workload-memory-usage-bytes-sum: 內存
  workload-network-io: 網絡 I/O
  workload-network-packet: 網絡數據包
modalDeleteGroupRoleBinding:
  createLabel: 確定刪除
  header: "您確定要刪除組的所有權限嗎: {groupName}"
modalDeleteIstio:
  disable: 禁用
  disabling: 禁用中
  onlyIstio:
    "false": 包括 Istio 和 Monitoring
    "true": 僅 Istio
  title: "您確定要禁用:"
modalFeedback:
  header: 歡迎使用{appName}!
  send: 開始使用
  subtitle: 在開始使用前，請讓我們了解關於您的信息...
modalRollbackService:
  action: 回滾
  current:
    label: 當前版本
  difference:
    label: 區別
  revisionId:
    label: 回滾到版本
    prompt: 選擇版本..
  title: 回滾"{instanceName}"
  titleWithSidekicks: "回滾\"{instanceName}\"&{count, plural,=1{#個sidecar}other{#個sidecars}}"
modalShell:
  title: "命令行: "
moveNamespace:
  actionLabel: 移動
  title: "移動{count, plural,\n=1 {命名空間: {name}}\nother{#個命名空間: }}\n"
  to: "到目標項目: "
namespacesPage:
  addNamespace: 添加命名空間
  header: 命名空間
  noData: 此集群未創建任何命名空間
  noMatch: 沒有符合搜索的命名空間
  table:
    created:
      label: 創建時間
    description:
      label: 描述
    name:
      label: 命名空間
    pods:
      label: Pods
    project:
      label: 項目
    workloads:
      label: 工作負載
nav:
  admin:
    accounts: 用戶
    catalogs: 應用商店
    clusters:
      rkeTemplate: RKE 集群模板
      tab: 集群
    drivers: 驅動管理
    globalDns: 全局 DNS 服務
    globalDnsEntries: 全局 DNS 服務
    globalDnsProviders: 全局 DNS 提供商
    globalMonitoring: 全局監控
    globalRegistry: 全局鏡像庫
    imageRepo:
      config: Harbor 配置
      logs: 日誌
      projects: 鏡像管理
      registries: 倉庫管理
      tab: 鏡像倉庫
    machines: 主機
    multiClusterApps: 多集群應用
    nodeDrivers: 主機驅動
    security:
      accounts: 用户
      authWarning: 注意:除本地身份驗證之外，在任何時候只能啟用單個身份驗證提供者。如果在2.1之前啟用了多個身份驗證提供者，則仍然可以編輯或禁用這些提供者，但不能啟用其他提供者。您也不能重新啟用以前禁用的提供者。禁用時要小心，禁用後配置無法恢復。
      authentication: 認證
      cloudCredentials: 雲憑證
      groupAccounts: 用戶組
      members: 成員
      podSecurityPolicies: Pod安全策略
      roles: 角色
      tab: 安全
    settings:
      advanced: 高級
      auth: 訪問控制
      registration: 主機註冊
      tab: 系統設置
    tab: 全局
  api:
    link: API & Keys
  apps:
    apps: 應用商店
    launch: 啟動
    manage: 管理
    noData: 目前沒有運行應用程序
    noMatch: 沒有應用程序匹配當前搜索
    tab: 應用商店
  auditLog:
    tab: 審計日誌
  catalog:
    all: 全部
    community: 社區貢獻
    library: 官方認證
  cluster:
    dashboard: 集群
    members: 成員
    namespaces: 命名空間
    nodes: 主機
    projects: 項目/命名空間
    staticPods: Static Pods
    storage:
      classes: 存儲類
      tab: 存儲
      volumes: 持久卷
    vlansubnet: 扁平網絡
  clusterTemplates:
    link: 集群模板
  containers:
    addBalancer: 添加負載均衡
    addContainer: 添加容器
    addDns: 添加DNS記錄
    addHpa: 添加 HPA
    addIngress: 添加Ingress
    addVolume: 添加卷
    containers: 工作負載
    deploy: 部署服務
    dns: 服務發現
    hpa: HPA
    importCompose: 導入YAML
    ingresses: 負載均衡
    pipelines: 流水線
    systemTab: 系統
    tab: 工作負載
    volumes: 數據卷
  dashboard:
    try: 儀錶盤
  f5:
    controllers: F5 負載均衡
    tls: TLS
  group:
    namespace: 按名稱空間分組
    namespaceWorkload: 按名稱空間/工作負載分組
    node: 按主機分組
    none: 列表視圖
    workload: 按負載量分組
  hosts:
    addHost: 添加主機
    tab: 主機
  infra:
    certificates: 證書
    configMaps: 配置映射
    f5Ingresses: F5 負載均衡
    hpa: HPA
    members: 成員
    pipelines: 流水線
    registries: 鏡像庫憑證
    secrets: 密文
    storagePage: 存儲
    tab: 資源
  nodeTemplates:
    link: 主機模板
  project:
    namespaces: 命名空間
    none: 項目/命名空間
  projectDropdown:
    clusters: 集群
    clustersNoData: 沒有集群。
    clustersNoMatch: 沒有與"{searchInput}"匹配的集群。
    label: 範圍
    projectInCluster: 在集群{cluster}中的項目。
    projectNoData: 這個集群沒有項目。
    projectNotReady: 集群未就緒。
    projects: 項目
    projectsIn: 集群{cluster}中的項目。
    projectsNoData: 選擇一個集群來查看項目。
    projectsNoMatch: 沒有與"{searchInput}"匹配的項目。
    search: 搜索...
  settings:
    advanced: 高級
    tab: 系統設置
  srToggleDropdown: 切換下拉菜單
  tools:
    alerts: 告警
    backup: Rancher 備份
    backups: 備份
    catalogs: 商店設置
    cisF5: F5 負載均衡服務
    cisScans: CIS 掃描
    fleet: 持續交付
    gatekeeper: OPA Gatekeeper
    istio: Istio
    logging: 日誌
    monitoring: 監控
    notifiers: 通知
    pipeline: 流水線
    rio: Rio
    tab: 工具
  user:
    label: 用戶菜單:{username}
    logout: 註銷
  userPreferences:
    link: 設定
newStack:
  answers:
    addActionLabel: 添加應答
    label: 應答(變量替換)
  description:
    placeholder: "例如: MyApp Stack"
  files:
    addActionLabel: 添加Compose文件
    label: 額外的Compose文件
    namePlaceholder: 文件名
    protipLabel: 支持{appName}<code>compose.yml</code>，<code>docker-compose.yml</code>和Kubernetes清單文件。
    uploadActionLabel: 從磁盤讀取
    valuePlaceholder: 文件內容
  header: 導入YAML
  name:
    placeholder: "例如: Myapp"
pagination:
  catalog: "{pages, plural,\n=0{無應用商店}\n=1{選中{count}{count, plural,=1{個應用商店}other{個應用商店}}}\nother{當前顯示{count}個應用商店中的{from}到{to}個}}\n"
  certificate: "{pages, plural,\n=0{無證書}\n=1{選中{count}{count, plural,=1{個證書}other{個證書}}}\nother{當前顯示{count}個證書中的{from}到{to}個}}\n"
  cluster: "{pages, plural,\n=0{沒有集群}\n=1{選中{count}{count, plural,=1{個集群}other{個集群}}}\nother{當前顯示{count}個集群中的{from}到{to}個 }}\n"
  clusterTemplates: "{pages, plural,\n=0 { 無模板 }\n=1 { 選中 {count} {count, plural, =1 { 個模板 } other { 個模板 }}}\nother { 當前顯示 {count} 個模板中的 {from} 到 {to} 個 }}\n"
  container: "{pages, plural,\n=0 {無容器}\n=1{選中{count} {count, plural, =1{個容器}other{個容器}}}\nother{當前顯示{count}個容器中的{from}到{to}個 }}\n"
  destinationRules: "{pages, plural,\n=0 { 無選項 }\n=1 { 選中 {count} {count, plural, =1 { 條目標規則 } other { 條目標規則 }}}\nother { 當前顯示 {count} 條目標規則中的 {from} 到 {to} 條}}\n"
  dnsProvider: "{pages, plural,\n=0{ 無 DNS 提供商 }\n=1{ 選中 {count}{count, plural,=1{ 條 DNS 提供商 } other { 條 DNS 提供商 }}}\nother { 當前顯示 {count} 條 DNS 提供商 中的 {from} 到 {to} 條 }}\n"
  dnsRecord: "{pages, plural,\n=0{無DNS記錄}\n=1{選中{count}{count, plural,=1{條DNS記錄}other{條DNS記錄}}}\nother {當前顯示{count}條DNS Records中的{from}到{to}條}}\n"
  driver: "{pages, plural,\n=0{無驅動}\n=1{選中{count}{count, plural,=1{個驅動}other{個驅動}}}\n  other {當前顯示{count}個驅動中的{from}到{to}個}}\n"
  driverOptions: "{pages, plural,\n=0{無驅動選項}\n=1{選中{count}{count, plural,=1{個驅動選項}other{個驅動選項}}}\nother {當前顯示{count}個驅動選項中的{from}到{to}個}}\n"
  entry: "{pages, plural,\n=0{無條目}\n=1{選中{count}{count, plural,=1{個條目}other{個條目}}}\nother {當前顯示{count}個條目中的{from}到{to}個 }}\n"
  event: "{pages, plural,\n=0{無事件}\n=1{選中{count}{count, plural,=1{個事件}other{個事件}}}\nother{當前顯示{count}個事件中的{from}到{to}個}}\n"
  f5Ctl: "{pages, plural,\n=0{ 無 F5負載均衡}\n=1{ 選中 {count}{count, plural,=1{ 個 F5負載均衡} other { 個 F5負載均衡}}}\nother { 當前顯示 {count} 個 F5負載均衡 中的 {from} 到 {to} 個 }}\n"
  f5Tls: "{pages, plural,\n=0{ 無 TLS證書}\n=1{ 選中 {count}{count, plural,=1{ 個 TLS證書} other { 個 TLS證書}}}\nother { 當前顯示 {count} 個 TLS證書 中的 {from} 到 {to} 個 }}\n"
  features: "{pages, plural,\n=0 { 無功能選項 }\n=1 { 選中 {count} {count, plural, =1 { 個功能選項 } other { 個功能選項 }}}\nother { 當前顯示 {count} 個功能選項中的 {from} 到 {to} 個 }}\n"
  gateways: "{pages, plural,\n=0 { 無選項 }\n=1 { 選中 {count} {count, plural, =1 { 個網關 } other { 個網關 }}}\nother { 當前顯示 {count} 個網關中的 {from} 到 {to} 個 }}\n"
  generic: "{pages, plural,\n=0{無條目}\n=1{選中{count}{count, plural, =1{個條目}other{個條目}}}\nother{當前顯示{count}個條目中的{from}到{to}個}}\n"
  hpa: "{pages, plural,\n=0 { 沒有 Pod 自動水平伸縮規則 }\n=1 { 選中 {count} {count, plural, =1 { 條 Pod 自動水平伸縮規則 } other { 條 Pod 自動水平伸縮規則 }}}\nother { 當前顯示 {count} 條 Pod 自動水平伸縮規則中的 {from} 到 {to} 條 }}\n"
  image: "{pages, plural,\n=0{無鏡像}\n=1{選中{count}{count, plural,=1{個鏡像}other{個鏡像}}}\nother {當前顯示{count}個鏡像中的{from}到{to}個 }}\n"
  ingress: "{pages, plural,\n=0{無Ingresses}\n=1{選中{count}{count, plural,=1{個Ingresses}other{個Ingresses}}}\nother {當前顯示{count}個Ingresses中的{from}到{to}個 }}\n"
  istioRule: "{pages, plural,\n=0 { 無流量規則 }\n=1 { 選中 {count} {count, plural, =1 { 條流量規則 } other { 條流量規則 }}}\nother { 當前顯示 {count} 條流量規則中的 {from} 到 {to} 條}}\n"
  link: "{pages, plural,\n=0{無鏈接}\n=1{選中{count}{count, plural,=1{個鏈接}other{個鏈接}}}\nother {當前顯示{count}個Links中的{from}到{to}個 }}\n"
  loadBalancer: "{pages, plural,\n=0{無負載均衡}\n=1{選中{count}{count, plural,=1{條負載均衡}other{條負載均衡}}}\nother {當前顯示{count}條負載均衡中的{from}到{to}條 }}\n"
  member: "{pages, plural,\n=0{無成員}\n=1{選中{count}{count, plural,=1{個成員}other{個成員}}}\nother {當前顯示{count}個成員中的{from}到{to}個}}\n"
  mount: "{pages, plural,\n=0{無掛載}\n=1{選中{count}{count, plural,=1{個掛載}other{個掛載}}}\nother {當前顯示{count}個掛載中的{from}到{to}個 }}\n"
  namespace: "{pages, plural,\n=0{無命名空間}\n=1{選中{count}{count, plural,=1{個命名空間}other{個命名空間}}}\nother {當前顯示{count}個命名空間中的{from}到{to}個 }}\n"
  node: "{pages, plural,\n=0{無主機}\n=1{選中{count}{count, plural,=1{台主機}other{台主機}}}\nother {當前顯示{count}個Nodes中的{from}到{to}個}}\n"
  nodePool: "{pages, plural,\n=0{無主機池}\n=1{選中{count}{count, plural,=1{個主機池}other{個主機池}}}\nother {當前顯示{count}個Node Pools中的{from}到{to}個}}\n"
  nodeTemplate: "{pages, plural,\n=0{無主機模板}\n=1{選中{count}{count, plural,=1{個主機模板}other{個主機模板}}}\nother {當前顯示{count}個主機模板中的{from}到{to}個 }}\n"
  pod: "{pages, plural,\n=0 {沒有Pods}\n=1{{count}{count, plural, =1{個Pod}other{個Pods}}}\nother{當前顯示{count}個Pods中的{from}到{to}個}}\n"
  podHighlightSubset: <b>{subset} of {count}</b> Pods
  podLabel: "{count, plural,\n  =1{個Pod}\n  other{個Pods}\n}\n"
  podNoSubset: 0 of {count} Pods
  port: "{pages, plural,\n=0{無端口}\n=1{選中{count}{count, plural,=1{個端口}other{個端口}}}\nother{當前顯示{count}個端口中的{from}到{to}個}}\n"
  project: "{pages, plural,\n=0{無項目}\n=1{選中{count}{count, plural,=1{個項目}other{個項目}}}\nother {當前顯示{count}個項目中的{from}到{to}個 }}\n"
  role: "{pages, plural,\n=0 { 沒有角色 }\n=1 { 選中 {count} {count, plural, =1 { 條角色 } other { 條角色 }}}\nother { 當前顯示 {count} 條角色中的 {from} 到 {to} 條 }}\n"
  rule: "{pages, plural,\n=0{無規則}\n=1{選中{count}{count, plural,=1{條規則}other{條規則}}}\nother {當前顯示{count}條規則中的{from}到{to}條 }}\n"
  service: "{pages, plural,\n=0{無服務}\n=1{選中{count}{count, plural,=1{個服務}other{個服務}}}\nother {當前顯示{count}個服務中的{from}到{to}個}}\n"
  storageClass: "{pages, plural,\n=0{無存儲類}\n=1{選中{count}{count, plural,=1{個存儲類}other{個存儲類}}}\nother{當前顯示{count}個Storage Classes中的{from}到{to}個}}\n"
  virtualServices: "{pages, plural,\n=0 { 無選項 }\n=1 { 選中 {count} {count, plural, =1 { 個虛擬服務 } other { 個虛擬服務 }}}\nother { 當前顯示 {count} 個虛擬服務中的 {from} 到 {to} 個 }}\n"
  volume: "{pages, plural,\n=0{沒有卷}\n=1{選中{count}{count, plural,=1{個卷}other{個卷}}}\nother {當前顯示{count}個數據卷中的{from}到{to}個}}\n"
  workload: "{pages, plural,\n=0{無工作負載}\n=1{選中{count}{count, plural,=1{個工作負載}other{個工作負載}}}\nother {當前顯示{count}個工作負載中的{from}到{to}個 }}\n\n"
pipelineNotification:
  asMessage: 發送信息到
  condition:
    changed:
      label: 改變
    failed:
      label: 失敗
    required: 構建狀態必選
    success:
      label: 成功
  header: 通知
  recipients:
    required: 接受者必填
  when: 當構建狀態為
projectIstioPage:
  info:
    noPermission: 您沒有配置 Istio 的權限。
    notEnabled: Istio 尚未啟用。點擊 <a href="/c/{clusterId}/istio/cluster-setting">此處</a> 啟用它。
    notOwner: Istio 尚未啟用，請與集群管理員聯繫。
registriesPage:
  index:
    header: 鏡像庫憑證
    linkTo: 添加鏡像庫憑證
    noData: 沒有鏡像庫憑證
    noMatch: 沒有鏡像庫憑據匹配當前搜索
    table:
      body:
        noData: 當前沒有任何鏡像倉庫
      header:
        address: 地址
        created: 創建時間
        state: 狀態
        username: 用戶名
  new:
    form:
      custom:
        help: 僅添加主機名或IP地址，不要包含協議頭(https://)。
        labelText: 地址
        placeholder: "例如: registry.example.com"
      password:
        labelText: 密碼
        placeholder: "例如: password"
      username:
        labelText: 用戶名
        placeholder: "例如: username"
    header: 添加鏡像庫憑證
reservationParameters:
  label: 資源限制
  memory:
    labelText: 內存
    placeholder: "默認: 整個主機"
    unit: MB
  milliCpu:
    labelText: 處理器
    placeholder: "默認: 整個主機"
    unit: mCPU
rkeConfigComment:
  clusterConfig: "\"\"\n\"Cluster Config\"\n\n"
  ingress: "\"\"\n\"  # 當前僅支持nginx的ingress\"\n\"  # 設置`provider: none`從而禁用ingress控制器\"\n\"  # 通過node_selector可以指定在某些節點上運行ingress控制器，例如: \"\n\"     provider: nginx\"\n\"     node_selector:\"\n\"       app: ingress\"\n"
  network: "\"\"\n\"  # 如果您在AWS上使用calico\"\n\"\"\n\"     network:\"\n\"       plugin: calico\"\n\"       calico_network_provider:\"\n\"         cloud_provider: aws\"\n\"\"\n\"  # 指定flannel的網絡接口\"\n\"\"\n\"     network:\"\n\"       plugin: flannel\"\n\"       flannel_network_provider:\"\n\"         iface: eth1\"\n\"\"\n\"  # 指定canal網絡插件的flannel網絡接口\"\n\"\"\n\"     network:\"\n\"       plugin: canal\"\n\"       canal_network_provider:\"\n\"         iface: eth1\"\n"
  rancher_kubernetes_engine_config: "\"\"\n\"Rancher Config\"\n"
  services: "\"\"\n\" # 自定義服務參數\"\n\"     services:\"\n\"       kube-api:\"\n\"         service_cluster_ip_range: 10.43.0.0/16\"\n\"       kube-controller:\"\n\"         cluster_cidr: 10.42.0.0/16\"\n\"         service_cluster_ip_range: 10.43.0.0/16\"\n\"       kubelet:\"\n\"         cluster_domain: cluster.local\"\n\"         cluster_dns_server: 10.43.0.10\"\n\"         # 擴展變量 \"\n\"         extra_args:\"\n\"           # 修改節點最大Pod數量\"\n\"           max-pods: '250' \"\n\"       etcd:\"\n\"         # 修改空間配額為$((4*1024*1024*1024))，默認2G,最大8G\"\n\"         extra_args:\"\n\"           quota-backend-bytes: '4294967296'\"\n\n"
runPipeline:
  branch:
    label: 分支
  noBranch: 該代碼庫沒有發現<code>.rancher-pipeline.yml</code>文件。您可以點擊<b>編輯配置</b>通過向導的方式配置流水線，也可以點擊<b>查看/編輯YAML</b>直接修改配置。
  title: 運行{name}
servicePage:
  certsTab:
    additional: 其他SNI證書
    default: 默認證書
    detail: TLS請求所使用的證書
    title: 證書
  containersTab:
    detail: 組成該服務的容器列表
    title: 容器
  endpoints: "訪問端口:"
  external:
    externalHostname: "外部主機名:"
    externalIp: "{count, plural,\n=1{個外部IP }\nother{個外部IP }\n}\n"
  globalScale: 每個主機{scale}
  header: "工作負載: {name}"
  linksTab:
    detail: 這些屬性顯示當前服務中容器之間的鏈接
    header: 鏈接
    noData: 當前服務沒有鏈接
  logTab:
    detail: 這項服務最近發生的編排事件
    title: 服務日誌
  multistat:
    created: "創建時間: "
    cronSchedule: 定時調度
    currentScale: "Pod 可用副本數: {count}"
    daemonSetScale: 每主機1個Pod
    fqdn: "FQDN:"
    image: "鏡像名: "
    namespace: "命名空間:"
    podNum:
      error:
        required: pod 個數不能為空
        typeError: pod 個數值為大於 0 的整數
      label: pod 個數
    scale: "Pod副本數:"
    type: "類型:"
  new:
    form:
      description:
        placeholder: "例如: 我的應用"
      name:
        placeholder: "例如: Myapp"
  newBalancer:
    form:
      description:
        placeholder: "例如: Mycompany.com的負載均衡"
      name:
        placeholder: "例如: website"
    upgradeImage: 負載均衡器鏡像版本將由<code>{from}</code>升級到<code>{to}</code>。
  newIngress:
    form:
      description:
        placeholder: "例如: Mycompany.com的Ingress"
      load:
        label: 扁平網絡負載
      name:
        placeholder: "例如: website"
  portsTab:
    detail: 從主機IP映射到容器監聽的端口
    notActive: 端口僅當服務處於活動狀態時可見
    title: 端口
  selector:
    label: "選擇器:"
  serviceType:
    cronJob: 定時任務
    daemonSet: 守護程序集
    deployment: Deployment
    job: 任務
    pod: 獨立容器
    replicaSet: 副本集
    replicationController: 複製控制器
    statefulSet: 有狀態集
  sidekick:
    header: 工作負載與Sidecar
    helpBlock: 選擇主容器或其中一個sidecar容器
    tabHeader: Sidecars
  type:
    composeservice: Compose服務
    dnsservice: 服務別名
    externalservice-host: 外部名稱
    externalservice-ip: 外部IP
    kubernetesservice: K8s服務
    loadbalancerservice: 負載均衡
    networkdriverservice: 網絡服務
    selectorservice: 選擇器
    service: 服務
    storagedriverservice: 存儲服務
settingsPage:
  tabs:
    feature: 功能選項
    settings: 高級設置
shareMemberRow:
  accessType:
    member: 成員
    owner: 所有者
    read-only: 只讀用戶
  table:
    public:
      accessType: 只讀
      name: 公有 (all members & groups)
stackHeader:
  outputs: 輸出
  title: "命名空間: {name}"
stackPage:
  basics:
    tagsCopy: 複製用逗號分隔的標籤
  containers:
    detail: 應用中所包含的獨立容器和服務。
    header: 容器
    status: "{count, plural,\n=0{無容器}\n=1{#個容器}\nother{#個容器}\n}\n"
  dnsServices:
    detail: 屬於該應用的DNS記錄
    header: DNS記錄
    status: "{count, plural,\n=0{無記錄}\n=1{#條記錄}\nother{#條記錄}\n}\n"
  header:
    backLink: 返回全部應用
    singleBanner: 查看單個應用
  loadBalancers:
    detail: 屬於該應用的負載均衡容器
    header: 負載均衡
    status: "{count, plural,\n=0{無負載均衡}\n=1{#條負載均衡}\nother{#條負載均衡}\n}\n"
  scalingGroups:
    detail: 屬於該擴容組的容器
    header: 擴容組
    status: "{count, plural,\n=0{無容器}\n=1{#個容器}\nother{#個容器}\n}\n"
  volumesTab:
    detail: 該應用掛載到容器中的卷
    header: 卷
    table:
      noData: 這個應用沒有掛載任何卷
      noMatch: 沒有匹配當前搜索的卷
      path: 掛載點
      shared: 共享
      writable: 可寫
telemetryOpt:
  eula:
    link: 條款和條件
    prefix: 我同意
    suffix: ""
  header: 信息統計
  label: 允許收集匿名統計信息
  learnMore:
    label: 了解更多
  subtext: |
    Rancher Labs希望能夠收集您環境的匿名配置信息以幫助改進{appName}產品。<br/>信息不會被提供給任何第三方，收集的信息不包含特定的資源名稱或地址
time:
  mins: "{mins, plural,\n=1{#分鐘}\nother{#分鐘}\n}\n"
  minsAgo: "{mins, plural,\n=1{#分鐘前}\nother{#分鐘前}\n}\n"
  now: 現在
  secsAgo: "{secs, plural,\n=1{#秒前}\nother{#秒前}\n}\n\n"
tooltipToggleOverride:
  label: 是否允許用戶修改當前參數?
tooltipWarning:
  dismiss: 取消
  notConfigured: 未設置訪問控制
units:
  cpu: milli CPUs
  percent: "%"
viewEditDescription:
  form:
    description:
      placeholder: "例如: 開發實驗環境"
    name:
      placeholder: "例如: lab"
virtualServicePage:
  noData: 沒有定義虛擬服務
  noMatch: 沒有虛擬服務匹配當前搜索
  notSupported: networking.istio.io/v1alpha3 API 在集群中不可用。
  table:
    hosts:
      label: 主機
volumesPage:
  addActionLabel: 添加Volume Claim
  claimName:
    label: Claim名稱
  noData: 沒有定義持久卷聲明
  noMatch: 沒有符合當前搜索的持久卷
  storageClass:
    label: 存儲類
  title: Volume Claims
  volume:
    label: 持久卷
windowsCluster:
  istio: 在 Windows 集群中不支持 Istio。
  logging:
    helpText: 我們將使用 fluentd 從每個容器中收集 stdout/stderr 日誌，以及收集每個 <b>Linux</b> 主機 <code >/var/log/containers/</code> 路徑和每個<b>Windows</b>主機<code >c:/var/log/containers/</code>路徑下的日誌文件，並且可以將日誌發送到下面配置的目標日誌收集服務。
    kafka:
      brokerTypeHelpText: 使用 Broker 列表作為 Kafka 連接入口點。
    vxlanWarning: "由於 <a href=\"https://github.com/kubernetes/kubernetes/issues/79359\" target=\"_blank\">kubernetes/kubernetes#79359</a> 這個問題，{appName} Logging 目前無法運行在 VxLan 模式下。我們正在與微軟合作， 以修復 Kubernetes 相關的問題。\n"
  pipelines: 在 Windows 集群中不支持 pipelines。
